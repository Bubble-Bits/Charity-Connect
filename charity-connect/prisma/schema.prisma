// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO:  Create your schema here

model User {
<<<<<<< HEAD
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  inbox         Chat[] @relation("userSentTo")
  outbox        Chat[] @relation("userSentFrom")
=======
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  inbox  Chat[] @relation("userSentTo")
  outbox Chat[] @relation("userSentFrom")
  postedItems Item[] @relation("ItemPostedBy")
  claimedItems Item[] @relation("ItemClaimedBy")
  name           String @unique
  email          String @unique
>>>>>>> 1e5d24277dfb337b91314ea4655b99087a69f6d8
}

// CHAT SCHEMA //

model Chat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId         String    @db.ObjectId
  to             User      @relation("userSentTo", fields: [chatId], references: [id], onDelete: Cascade)
  from           User      @relation("userSentFrom", fields: [chatId], references: [id], onDelete: Cascade)
  content        String
  photos         String[]
  sentAt         DateTime  @default(now())
  messageStatus  String
}

// ITEMS SCHEMA //

model Item {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  category       String?
  description    String
  timeOwned      DateTime?
  features       String[]
  postedAt       DateTime  @default(now())
  photos         String[]
  zipcode        String
  pickup         Boolean   @default(false)
  shipping       Boolean   @default(false)
  status         String    @default("Available")
  poster         User      @relation("ItemPostedBy", fields: [posterId], references: [id])
  posterId       String    @db.ObjectId
  claimer        User?     @relation("ItemClaimedBy", fields: [claimerId], references: [id])
  claimerId      String?   @db.ObjectId
}

//* Example Schema

//! model User {
//!   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//!   name           String?
//!   email          String?   @unique
//!   emailVerified  DateTime?
//!   image          String?
//!   hashedPassword String?
//!   createdAt      DateTime  @default(now())
//!   updatedAt      DateTime  @updatedAt
//!   favoriteIds    String[]  @db.ObjectId

//!   accounts     Account[]
//!   listings     Listing[]
//!   reservations Reservation[]
//! }

//! model Account {
//!   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//!   userId            String  @db.ObjectId
//!   type              String
//!   provider          String
//!   providerAccountId String
//!   refresh_token     String? @db.String
//!   access_token      String? @db.String
//!   expires_at        Int?
//!   token_type        String?
//!   scope             String?
//!   id_token          String? @db.String
//!   session_state     String?

//!   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//!   @@unique([provider, providerAccountId])
//! }

//

