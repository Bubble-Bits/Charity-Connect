// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// USERS SCHEMA //

model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  localId             String?
  chatIds             String[] @db.ObjectId //[]
  chats               Chat[]   @relation(fields: [chatIds], references: [id]) //[]
  postedItems         Item[]   @relation("ItemPostedBy") //[]
  claimedItems        Item[]   @relation("ItemClaimedBy") //[]
  name                String   @unique // FIREBASE
  email               String   @unique //FIREBASE
  bio                 String?
  profilePic          String? //FIREBASE
  address             String?
  itemsClaimed        Int      @default(0) //0
  itemsSuccessClaimed Int      @default(0) // 0
  blocked             String[] //0
}

// CHAT SCHEMA //

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userIds  String[]  @db.ObjectId
  users    User[]    @relation(fields: [userIds], references: [id])
  messages Message[]
}

model Message {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  chat           Chat        @relation(fields: [chatId], references: [id])
  chatId         String      @db.ObjectId
  content        String
  photo          String?
  sentAt         DateTime
  sender         String
}

// ITEMS SCHEMA //

model Item {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String?
  description String
  timeOwned   DateTime?
  features    String[]
  postedAt    DateTime  @default(now())
  photos      String[]
  address     String
  lat         Float?
  lng         Float?
  pickup      Boolean   @default(false)
  shipping    Boolean   @default(false)
  status      String    @default("Available")
  poster      User      @relation("ItemPostedBy", fields: [posterId], references: [id])
  posterId    String    @db.ObjectId
  claimer     User?     @relation("ItemClaimedBy", fields: [claimerId], references: [id])
  claimerId   String?   @db.ObjectId
}

model ph {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Test {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  content        String
}

//* Example Schema

//! model User {
//!   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//!   name           String?
//!   email          String?   @unique
//!   emailVerified  DateTime?
//!   image          String?
//!   hashedPassword String?
//!   createdAt      DateTime  @default(now())
//!   updatedAt      DateTime  @updatedAt
//!   favoriteIds    String[]  @db.ObjectId

//!   accounts     Account[]
//!   listings     Listing[]
//!   reservations Reservation[]
//! }

//! model Account {
//!   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//!   userId            String  @db.ObjectId
//!   type              String
//!   provider          String
//!   providerAccountId String
//!   refresh_token     String? @db.String
//!   access_token      String? @db.String
//!   expires_at        Int?
//!   token_type        String?
//!   scope             String?
//!   id_token          String? @db.String
//!   session_state     String?

//!   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//!   @@unique([provider, providerAccountId])
//! }

//
